bt_navigator:
  ros__parameters:
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odometry/global # topic to subscribe to, this one comes from ekf pkg
    bt_loop_duration: 10
    default_server_timeout: 20 
    enable_groot_monitoring: False
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    # default_nav_to_pose_bt_xml: "/home/coderey/ros2_ws/src/mob_rob_loca/config/nav2pose.xml"
    # default_nav_through_poses_bt_xml: "/home/coderey/ros2_ws/src/mob_rob_loca/config/navthroughposes.xml"
    plugin_lib_names:
        - nav2_compute_path_to_pose_action_bt_node
        - nav2_compute_path_through_poses_action_bt_node
        - nav2_follow_path_action_bt_node
        - nav2_back_up_action_bt_node
        - nav2_spin_action_bt_node
        - nav2_wait_action_bt_node
        - nav2_clear_costmap_service_bt_node
        - nav2_is_stuck_condition_bt_node
        - nav2_goal_reached_condition_bt_node
        - nav2_goal_updated_condition_bt_node
        - nav2_initial_pose_received_condition_bt_node
        - nav2_reinitialize_global_localization_service_bt_node
        - nav2_rate_controller_bt_node
        - nav2_distance_controller_bt_node
        - nav2_speed_controller_bt_node
        - nav2_truncate_path_action_bt_node
        - nav2_goal_updater_node_bt_node
        - nav2_recovery_node_bt_node
        - nav2_pipeline_sequence_bt_node
        - nav2_round_robin_node_bt_node
        - nav2_transform_available_condition_bt_node
        - nav2_time_expired_condition_bt_node
        - nav2_distance_traveled_condition_bt_node
        - nav2_single_trigger_bt_node
        - nav2_is_battery_low_condition_bt_node
        - nav2_navigate_through_poses_action_bt_node
        - nav2_navigate_to_pose_action_bt_node
        - nav2_remove_passed_goals_action_bt_node
        - nav2_planner_selector_bt_node
        - nav2_controller_selector_bt_node
        - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: True # set all sim_time to false since we're using it on real time systems, and not simulation

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 10.0 # default one, seems sufficient
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5 # 0.001 changed because differential robot
    min_theta_velocity_threshold: 0.001
    odom_topic: /odometry/global
    failure_tolerance: 0.5
    progress_checker_plugins: ["progress_checker"]
    #goal_checker_plugin: "goal_checker" # pk pas general ?
    controller_plugins: ["FollowPath"]
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 40.0 # resolution of the goal imposes a longer time to right position
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.075
      yaw_goal_tolerance: 0.25

    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      # why not dwblocalplanner ? should test
      #plugin: "nav2_rotation_shim_controller::RotationShimController" # controller prioritizing good orientation of the robot before advancing, i.e. robot will turn at the beginning, orienting itself towards the path
      #primary_controller: "dwb_core::DWBLocalPlanner"
      #angular_dist_threshold: 0.95
      #forward_sampling_distance: 0.15
      #rotate_to_heading_angular_vel: 1.5
      #max_angular_accel: 2.0
      #simulate_ahead_time: 1.0
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 2.4
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.4
      min_speed_theta: 0.0
      acc_lim_x: 2.5
      acc_lim_y: 0.0
      acc_lim_theta: 3.2
      decel_lim_x: -2.5
      decel_lim_y: 0.0
      decel_lim_theta: -3.2
      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.3
      xy_goal_tolerance: 0.075
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 3.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: True
      width: 3
      # When using GPS navigation you will potentially traverse huge environments which are not practical to
      # fit on a big static costmap. Thus it is recommended to use a rolling global costmap large enough to 
      # contain each pair of successive waypoints. See: https://github.com/ros-
      height: 3
      resolution: 0.005
      robot_radius: 0.125
      plugins: ["static_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0 # 2.0
        inflation_radius: 0.2 # 5cm + 12.5cm
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      #filters: ["keepout_filter"]
      #keepout_filter:
       # plugin: "nav2_costmap_2d::KeepoutFilter"
       # topic_name: "/keepout_filter_mask"
       # enabled: True
       # filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: True

local_costmap_client:
    ros__parameters:
      use_sim_time: True

local_costmap_rclcpp_node:
  ros__parameters:
    use_sim_time: True

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.125 # established radius
      resolution: 0.005
      rolling_window: True
      width: 50
      height: 50
      track_unknown_space: false
      #plugins: ["inflation_layer"]
      plugins: ["static_layer", "inflation_layer"]
      #filters: ["keepout_filter", "inflation_layer"]
      static_layer:
        enabled: True
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        transform_tolerance: 0.3
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 4.0 # 2.0
        inflation_radius: 0.2 # 5cm + 12.5cm
      #keepout_filter:
       # plugin: "nav2_costmap_2d::KeepoutFilter"
       # topic_name: "/keepout_filter_mask"
       # enabled: True
       # filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: True

global_costmap_client:
  ros__parameters:
    use_sim_time: True

global_costmap_rclcpp_node:
  ros__parameters:
    use_sim_time: True

map_server:
  ros__parameters:
    yaml_filename: "/home/ubuntu/Documents/ros2_ws/install/mob_rob_loca/share/mob_rob_loca/maps/circuit.yaml" # path hard defined, may be better to generalize this
    topic_name: "map"

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server: # some differences to check
  ros__parameters:
    expected_planner_frequency: 1
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: 'nav2_navfn_planner/NavfnPlanner' # A* behaviour
      tolerance: 0.2
      use_astar: true
      allow_unknown: false
      interpolation_resolution: 0.005 # short resolution required since we have low tolerance on the goal pose

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True



smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-4
      max_its: 1000
      do_refinement: True



waypoint_follower: # used for tests or displaying robot task during events, normally only the go_to_pose fct will be used
  ros__parameters:
    stop_on_failure: true
    loop_rate: 2
    global_frame_id: map
    action_server_result_timeout: 5000.0 #seconds == 3 hours
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 1000 # milliseconds

velocity_smoother:
  ros__parameters:
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: /odometry/global
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0